import type { NextPage } from "next";
import Head from "next/head";
import { trpc } from "../utils/trpc";
import { signIn, signOut, useSession } from "next-auth/react";
import { useEffect, useState } from "react";

type TechnologyCardProps = {
	name: string;
	description: string;
	documentation: string;
};

const HomeContents = () => {
	const [url, setUrl] = useState("");
	const [notes, setNotes] = useState("");
	const { data, status } = useSession();
	const { data: chain } = trpc.useQuery([
		"example.getChain",
		{ userId: data?.user?.id as string },
	]);

	useEffect(() => {
		console.log(url);
	}, [url]);

	const ctx = trpc.useContext();
	const { mutate: addToChain } = trpc.useMutation("question.addToChain", {
		onSuccess: () => ctx.invalidateQueries("example.getChain"),
	});
	const addUrl = () => {
		addToChain({ url, notes });
	};

	if (status === "loading") return <div>Loading...</div>;

	if (!data)
		return (
			<div>
				<div>Please log in</div>
				<button onClick={() => signIn("twitch")}>Sign in with Twitch</button>
				<input
					type="text"
					value={url}
					onChange={(e) => setUrl(e.target.value)}
				/>
				<button onClick={addUrl}></button>
			</div>
		);

	return (
		<div>
			Hello {data.user?.name}
			<button onClick={() => signOut()}>Sign Out</button>
			<div style={{ display: "flex", flexDirection: "row", gap: "10px" }}>
				<input
					type="text"
					placeholder="url"
					id="url"
					value={url}
					onChange={(e) => setUrl(e.target.value)}
				></input>
				<input
					type="text"
					placeholder="notes"
					id="notes"
					value={notes}
					onChange={(e) => setNotes(e.target.value)}
				></input>
				<button onClick={addUrl}>Add Url</button>
			</div>
			{chain?.map((link) => {
				return (
					<p
						style={{ border: "1px solid black", margin: "5px", width: "400px" }}
					>
						id: {link.id}
						<br />
						url: {link.url}
						<br />
						notes: {link.notes}
						<br />
						userId: {link.userId}
					</p>
				);
			})}
		</div>
	);
};

const Home: NextPage = () => {
	const hello = trpc.useQuery(["example.hello", { text: "from tRPC" }]);

	return (
		<>
			<Head>
				<title>ChainLinkk</title>
				<meta name="description" content="Generated by create-t3-app" />
				<link rel="icon" href="/favicon.ico" />
			</Head>

			<HomeContents />
		</>
	);
};

const TechnologyCard = ({
	name,
	description,
	documentation,
}: TechnologyCardProps) => {
	return (
		<section className="flex flex-col justify-center p-6 duration-500 border-2 border-gray-500 rounded shadow-xl motion-safe:hover:scale-105">
			<h2 className="text-lg text-gray-700">{name}</h2>
			<p className="text-sm text-gray-600">{description}</p>
			<a
				className="mt-3 text-sm underline text-violet-500 decoration-dotted underline-offset-2"
				href={documentation}
				target="_blank"
				rel="noreferrer"
			>
				Documentation
			</a>
		</section>
	);
};

export default Home;
